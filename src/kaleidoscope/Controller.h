// -*- c++ -*-

#pragma once

#include <Arduino.h>

// This header file should contain the constants that are needed to correctly size static
// arrays at compile time. Also, (macro) definitions of class & object names (e.g. which
// hardware module to use) should be found here, and possibly other things I haven't
// thought of yet. It should be generated by the same pre-build script that creates the
// keymap file. It probably lives right next to the *.ino file, but maybe in a
// subdirectory (e.g. "libraries/Kaleidoscope-Constants/"?). It may be necessary to
// include this before others include files; I'm not sure.
//#include <Kaleidoscope-Constants.inc>
//#include KALEIDOSCOPE_HARDWARE_H  // defined above in Kaleidoscope-Constants
//#include KALEIDOSCOPE_HID_H

//#include <Kaleidoscope-Hardware-Model01.h>
#include KALEIDOSCOPE_HARDWARE_H
#include KALEIDOSCOPE_HARDWARE_KEYBOARD_H
#include KALEIDOSCOPE_KEYADDR_H
#include "kaleidoscope/Keymap.h"
#include "kaleidoscope/KeyswitchEvent.h"
#include "kaleidoscope/Layer.h"
#include "kaleidoscope/cKey.h"
#include "kaleidoscope/Plugin.h"
#include "kaleidoscope/hid/Report.h"
#include "kaleidoscope/KeyArray.h"


namespace kaleidoscope {

/// The core Kaleidoscope program; it controls everything else
class Controller {
 public:
  Controller(Keymap & keymap,
             hardware::Keyboard& keyboard,
             hid::keyboard::Report& keyboard_report)
      : keymap_(keymap),
        keyboard_(keyboard),
        report_(keyboard_report),
        plugin_count_(0) {}
  
  void init(); // setup();
  void run();  // loop();

  // this might turn out to be a macro instead; we want this to happen at compile time
  // void initPlugin(Plugin & p) {
  //   p.init(plugin_count_++);
  // }

  static constexpr byte id{0xFF};

  bool handleKeyswitchEvent(KeyswitchEvent event, Plugin* caller = nullptr);
  void sendKeyboardReport();

  Key lookup(KeyAddr key_addr) const;

 private:

  // active_keys_ can't really be a Layer because that would reference PROGMEM
  //Key active_keys_[total_keys];
  KeyArray active_keys_;

  Keymap& keymap_;
  hardware::Keyboard& keyboard_;
  // I want to make report_ a full member, not a pointer, but maybe not until I
  // replace KeyboardioHID entirely
  hid::keyboard::Report& report_;

  byte plugin_count_;
  // actually, the plugins_[] array is probably useless, because we can't meaningfully
  // iterate through it in order to call the plugin hook methods
  // Actually, we can, if we use virtual functions for the hooks, but that has its own drawbacks
  //Plugin* plugins_[MAX_PLUGINS]; // need to define this statically somehow
};


inline Key Controller::lookup(KeyAddr k) const {
  return keymap_[k];
}


} // namespace kaleidoscope {
